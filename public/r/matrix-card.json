{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "matrix-card",
  "type": "registry:ui",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "ottoui/MatrixCard.tsx",
      "content": "\"use client\"\n\nimport { ReactNode, useEffect, useRef, useState } from \"react\"\nimport { motion } from \"motion/react\"\n\nexport interface MatrixCardProps {\n  title?: string\n  description?: string\n  fontSize?: number\n  chars?: string\n  className?: string\n  children?: ReactNode\n}\n\nexport default function MatrixCard({\n  title = \"Matrix Effect Card\",\n  description = \"Hover or hold down over this card to see the matrix rain effect in action.\",\n  fontSize = 14,\n  chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789$@#%\",\n  className = \"\",\n  children,\n}: MatrixCardProps) {\n  const [isHovered, setIsHovered] = useState(false)\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const requestRef = useRef<number>(undefined)\n  const containerRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    if (!isHovered || !canvasRef.current || !containerRef.current) return\n\n    const canvas = canvasRef.current\n    const container = containerRef.current\n    const ctx = canvas.getContext(\"2d\")\n    if (!ctx) return\n\n    const resizeCanvas = () => {\n      const rect = container.getBoundingClientRect()\n      canvas.width = rect.width\n      canvas.height = rect.height\n    }\n\n    resizeCanvas()\n    window.addEventListener(\"resize\", resizeCanvas)\n\n    const columns = Math.floor(canvas.width / fontSize)\n    const drops: number[] = new Array(columns).fill(1)\n\n    ctx.font = `${fontSize}px monospace`\n\n    const matrix = () => {\n      ctx.fillStyle = \"rgba(0, 0, 0, 0.05)\"\n      ctx.fillRect(0, 0, canvas.width, canvas.height)\n      ctx.fillStyle = \"#0F0\"\n      ctx.textAlign = \"center\"\n\n      for (let i = 0; i < drops.length; i++) {\n        const text = chars[Math.floor(Math.random() * chars.length)]\n        ctx.fillText(text, i * fontSize, drops[i] * fontSize)\n        if (drops[i] * fontSize > canvas.height && Math.random() > 0.975) {\n          drops[i] = 0\n        }\n        drops[i]++\n      }\n      requestRef.current = requestAnimationFrame(matrix)\n    }\n\n    matrix()\n\n    return () => {\n      if (requestRef.current) cancelAnimationFrame(requestRef.current)\n      window.removeEventListener(\"resize\", resizeCanvas)\n    }\n  }, [isHovered, fontSize, chars])\n\n  return (\n    <div\n      className={`flex h-[400px] min-h-[300px] w-full items-center justify-center p-4 md:h-[640px]`}\n    >\n      <motion.div\n        ref={containerRef}\n        className={`group bg-background relative h-full w-full max-w-md overflow-hidden rounded-xl border p-6 transition-colors ${className}`}\n        onHoverStart={() => setIsHovered(true)}\n        onHoverEnd={() => setIsHovered(false)}\n        onTouchStart={() => setIsHovered(true)}\n        onTouchEnd={() => setIsHovered(false)}\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3 }}\n      >\n        <canvas\n          ref={canvasRef}\n          className=\"pointer-events-none absolute inset-0 h-full w-full opacity-0 transition-opacity duration-300 group-hover:opacity-20\"\n        />\n        <div className=\"relative z-10 flex h-full flex-col items-center justify-center\">\n          {children ? (\n            children\n          ) : (\n            <>\n              <p className=\"text-foreground pointer-events-none mb-2 text-xl font-bold select-none\">\n                {title}\n              </p>\n              <p className=\"text-primary-foreground pointer-events-none text-center select-none\">\n                {description}\n              </p>\n            </>\n          )}\n        </div>\n      </motion.div>\n    </div>\n  )\n}\n",
      "type": "registry:ui",
      "target": "components/ottoui/ui/MatrixCard.tsx"
    }
  ]
}