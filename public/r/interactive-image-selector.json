{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "interactive-image-selector",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "files": [
    {
      "path": "ottoui/InteractiveImageSelector.tsx",
      "content": "\"use client\"\n\nimport { useCallback, useState } from \"react\"\nimport { Share2, Trash2 } from \"lucide-react\"\nimport { AnimatePresence, motion } from \"motion/react\"\n\nexport interface ImageData {\n  id: number\n  src: string\n}\n\nexport interface InteractiveImageSelectorProps {\n  images?: ImageData[]\n  selectedImages?: number[]\n  onChange?: (selected: number[]) => void\n  onDelete?: (deleted: number[]) => void\n  onShare?: (selected: number[]) => void\n  className?: string\n  title?: string\n  selectable?: boolean\n}\n\nconst defaultImages: ImageData[] = [\n  {\n    id: 1,\n    src: \"https://images.unsplash.com/photo-1605478185737-99ae313e940c?=jpg&fit=crop&w=300&q=80&fit=max\",\n  },\n  {\n    id: 2,\n    src: \"https://images.unsplash.com/photo-1564951434112-64d74cc2a2d7?=jpg&fit=crop&w=300&q=80&fit=max\",\n  },\n  {\n    id: 3,\n    src: \"https://images.unsplash.com/photo-1612317248613-c1236be97f6f?=jpg&fit=crop&w=300&q=80&fit=max\",\n  },\n  {\n    id: 4,\n    src: \"https://images.unsplash.com/photo-1603118675111-239b194fb8d8?=jpg&fit=crop&w=300&q=80&fit=max\",\n  },\n  {\n    id: 5,\n    src: \"https://images.unsplash.com/photo-1605478185737-99ae313e940c?=jpg&fit=crop&w=300&q=80&fit=max\",\n  },\n  {\n    id: 6,\n    src: \"https://images.unsplash.com/photo-1564951434112-64d74cc2a2d7?=jpg&fit=crop&w=300&q=80&fit=max\",\n  },\n]\n\nexport default function InteractiveImageSelector({\n  images = defaultImages,\n  selectedImages: controlledSelected,\n  onChange,\n  onDelete,\n  onShare,\n  className = \"\",\n  title = \"Art Gallery\",\n  selectable = false,\n}: InteractiveImageSelectorProps) {\n  const [internalImages, setInternalImages] = useState<ImageData[]>(images)\n  const [internalSelected, setInternalSelected] = useState<number[]>([])\n  const [isSelecting, setIsSelecting] = useState(selectable)\n\n  const selected = controlledSelected ?? internalSelected\n  const imageMap = new Map(internalImages.map((img) => [img.id, img]))\n\n  const handleImageClick = useCallback(\n    (id: number) => {\n      if (!isSelecting) return\n      const newSelected = selected.includes(id)\n        ? selected.filter((imgId) => imgId !== id)\n        : [...selected, id]\n      if (onChange) {\n        onChange(newSelected)\n      } else {\n        setInternalSelected(newSelected)\n      }\n    },\n    [isSelecting, selected, onChange]\n  )\n\n  const handleDelete = useCallback(() => {\n    const newImages = internalImages.filter((img) => !selected.includes(img.id))\n    if (onDelete) {\n      onDelete(selected)\n    }\n    setInternalImages(newImages)\n    if (onChange) {\n      onChange([])\n    } else {\n      setInternalSelected([])\n    }\n  }, [selected, internalImages, onDelete, onChange])\n\n  const handleReset = useCallback(() => {\n    setInternalImages(images)\n    if (onChange) {\n      onChange([])\n    } else {\n      setInternalSelected([])\n    }\n    setIsSelecting(false)\n  }, [images, onChange])\n\n  const toggleSelecting = useCallback(() => {\n    setIsSelecting((prev) => !prev)\n    if (isSelecting) {\n      if (onChange) {\n        onChange([])\n      } else {\n        setInternalSelected([])\n      }\n    }\n  }, [isSelecting, onChange])\n\n  const handleShare = useCallback(() => {\n    if (onShare) onShare(selected)\n  }, [onShare, selected])\n\n  return (\n    <div\n      className={`relative flex h-full w-full max-w-[500px] flex-col justify-between p-4 ${className}`}\n    >\n      <div className=\"from-background/20 dark:from-background/50 pointer-events-none absolute inset-x-0 top-0 z-10 h-28 bg-linear-to-b to-transparent\"></div>\n      <div className=\"absolute top-5 right-5 left-5 z-20 flex justify-between p-4\">\n        <motion.button\n          whileHover={{ scale: 1.05 }}\n          whileTap={{ scale: 0.95 }}\n          className=\"bg-background/20 text-foreground cursor-pointer rounded-full px-3 py-1 text-sm font-semibold bg-blend-luminosity backdrop-blur-xl\"\n          onClick={handleReset}\n          aria-label=\"Reset selection\"\n        >\n          Reset\n        </motion.button>\n        <button\n          className=\"bg-background/20 text-foreground cursor-pointer rounded-full px-3 py-1 text-sm font-semibold bg-blend-luminosity backdrop-blur-xl\"\n          onClick={toggleSelecting}\n          aria-label={isSelecting ? \"Cancel selection\" : \"Select images\"}\n        >\n          {isSelecting ? \"Cancel\" : \"Select\"}\n        </button>\n      </div>\n      <div className=\"absolute top-16 right-5 left-5 z-20 flex justify-between p-4\">\n        <div className=\"flex items-center gap-2\">\n          <span className=\"text-foreground text-2xl font-bold\">{title}</span>\n        </div>\n      </div>\n      <motion.div className=\"grid grid-cols-3 gap-1 overflow-scroll\" layout>\n        <AnimatePresence>\n          {internalImages.map((img) => (\n            <motion.div\n              key={img.id}\n              layout\n              initial={{ opacity: 0, scale: 0.8 }}\n              animate={{ opacity: 1, scale: 1 }}\n              exit={{ opacity: 0, scale: 0.8 }}\n              transition={{ type: \"spring\", stiffness: 300, damping: 25 }}\n              className=\"relative aspect-square cursor-pointer\"\n              onClick={() => handleImageClick(img.id)}\n            >\n              <img\n                src={img.src}\n                alt={`Image ${img.id}`}\n                className={`h-full w-full rounded-lg object-cover ${\n                  selected.includes(img.id) && isSelecting ? \"opacity-75\" : \"\"\n                }`}\n                width={200}\n                height={200}\n                loading=\"lazy\"\n              />\n              {isSelecting && selected.includes(img.id) && (\n                <div className=\"absolute right-2 bottom-2 flex h-6 w-6 items-center justify-center rounded-full border border-white bg-blue-500 text-white\">\n                  âœ“\n                </div>\n              )}\n            </motion.div>\n          ))}\n        </AnimatePresence>\n      </motion.div>\n      <AnimatePresence>\n        {isSelecting && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: 20 }}\n            className=\"bg-background/20 /20 absolute right-0 bottom-0 left-0 z-10 flex items-center justify-between p-4 bg-blend-luminosity backdrop-blur-xl\"\n          >\n            <button\n              className=\"cursor-pointer text-blue-500\"\n              onClick={handleShare}\n            >\n              <Share2 size={24} />\n            </button>\n            <span className=\"text-foreground\">{selected.length} selected</span>\n            <button\n              className=\"cursor-pointer text-blue-500\"\n              onClick={handleDelete}\n              disabled={selected.length === 0}\n            >\n              <Trash2 size={24} />\n            </button>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  )\n}\n",
      "type": "registry:ui",
      "target": "components/ottoui/ui/InteractiveImageSelector.tsx"
    }
  ]
}