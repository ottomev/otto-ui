{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "basic-modal",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react",
    "usehooks-ts",
    "motion"
  ],
  "files": [
    {
      "path": "ottoui/BasicModal.tsx",
      "content": "\"use client\"\n\nimport { useEffect, useRef, useState } from \"react\"\nimport { X } from \"lucide-react\"\nimport { AnimatePresence, motion } from \"motion/react\"\nimport { useOnClickOutside } from \"usehooks-ts\"\n\ninterface BasicModalProps {\n  isOpen: boolean\n  onClose: () => void\n  title?: string\n  children: React.ReactNode\n  size?: \"sm\" | \"md\" | \"lg\" | \"xl\" | \"full\"\n}\n\nconst modalSizes = {\n  sm: \"max-w-sm\",\n  md: \"max-w-md\",\n  lg: \"max-w-lg\",\n  xl: \"max-w-xl\",\n  full: \"max-w-4xl\",\n}\n\nexport default function BasicModal({\n  isOpen,\n  onClose,\n  title,\n  children,\n  size = \"md\",\n}: BasicModalProps) {\n  const overlayRef = useRef<HTMLDivElement>(null)\n  const modalRef = useRef<HTMLDivElement>(\n    null\n  ) as React.RefObject<HTMLDivElement>\n  useOnClickOutside(modalRef, () => onClose())\n\n  // Close on Escape key press\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === \"Escape\" && isOpen) {\n        onClose()\n      }\n    }\n\n    document.addEventListener(\"keydown\", handleKeyDown)\n    return () => document.removeEventListener(\"keydown\", handleKeyDown)\n  }, [isOpen, onClose])\n\n  // Prevent body scroll when modal is open\n  useEffect(() => {\n    if (isOpen) {\n      document.body.style.overflow = \"hidden\"\n    } else {\n      document.body.style.overflow = \"\"\n    }\n    return () => {\n      document.body.style.overflow = \"\"\n    }\n  }, [isOpen])\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <>\n          {/* Backdrop */}\n          <motion.div\n            ref={overlayRef}\n            className=\"bg-background/70 fixed inset-0 z-40 backdrop-blur-sm\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            transition={{ duration: 0.2 }}\n            onClick={(e) => {\n              if (e.target === overlayRef.current) {\n                onClose()\n              }\n            }}\n          />\n\n          {/* Modal */}\n          <motion.div\n            className=\"fixed inset-0 z-50 flex items-center justify-center overflow-y-auto px-4 py-6 sm:p-0\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n          >\n            <motion.div\n              ref={modalRef}\n              className={`${modalSizes[size]} bg-primary relative mx-auto w-full rounded-xl border p-4 shadow-xl sm:p-6`}\n              initial={{ scale: 0.9, y: 20, opacity: 0 }}\n              animate={{ scale: 1, y: 0, opacity: 1 }}\n              exit={{\n                scale: 0.95,\n                y: 10,\n                opacity: 0,\n                transition: { duration: 0.15 },\n              }}\n              transition={{ type: \"spring\", damping: 25, stiffness: 300 }}\n            >\n              {/* Header */}\n              <div className=\"mb-4 flex items-center justify-between\">\n                {title && (\n                  <h3 className=\"text-xl leading-6 font-medium\">{title}</h3>\n                )}\n                <motion.button\n                  className=\"hover:bg-secondary ml-auto rounded-full p-1.5 transition-colors\"\n                  onClick={onClose}\n                  whileHover={{ rotate: 90 }}\n                  transition={{ duration: 0.2 }}\n                >\n                  <X className=\"h-5 w-5\" />\n                  <span className=\"sr-only\">Close</span>\n                </motion.button>\n              </div>\n\n              {/* Content */}\n              <div className=\"relative\">{children}</div>\n            </motion.div>\n          </motion.div>\n        </>\n      )}\n    </AnimatePresence>\n  )\n}\n",
      "type": "registry:ui",
      "target": "components/ottoui/ui/BasicModal.tsx"
    }
  ]
}