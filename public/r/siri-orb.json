{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "siri-orb",
  "type": "registry:ui",
  "dependencies": [
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "path": "utils/cn.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "type": "registry:lib",
      "target": "lib/utils/cn.ts"
    },
    {
      "path": "ottoui/SiriOrb.tsx",
      "content": "\"use client\"\n\nimport { cn } from \"@/lib/utils/cn\"\n\ninterface SiriOrbProps {\n  size?: string\n  className?: string\n  colors?: {\n    bg?: string\n    c1?: string\n    c2?: string\n    c3?: string\n  }\n  animationDuration?: number\n}\n\nconst SiriOrb: React.FC<SiriOrbProps> = ({\n  size = \"192px\",\n  className,\n  colors,\n  animationDuration = 20,\n}) => {\n  const defaultColors = {\n    bg: \"oklch(95% 0.02 264.695)\",\n    c1: \"oklch(75% 0.15 350)\", // Pastel pink\n    c2: \"oklch(80% 0.12 200)\", // Pastel blue\n    c3: \"oklch(78% 0.14 280)\", // Pastel purple/lavender\n  }\n\n  const finalColors = { ...defaultColors, ...colors }\n\n  // Extract numeric value from size for calculations\n  const sizeValue = parseInt(size.replace(\"px\", \"\"), 10)\n\n  // Responsive calculations based on size\n  const blurAmount =\n    sizeValue < 50\n      ? Math.max(sizeValue * 0.008, 1) // Reduced blur for small sizes\n      : Math.max(sizeValue * 0.015, 4)\n\n  const contrastAmount =\n    sizeValue < 50\n      ? Math.max(sizeValue * 0.004, 1.2) // Reduced contrast for small sizes\n      : Math.max(sizeValue * 0.008, 1.5)\n\n  const dotSize =\n    sizeValue < 50\n      ? Math.max(sizeValue * 0.004, 0.05) // Smaller dots for small sizes\n      : Math.max(sizeValue * 0.008, 0.1)\n\n  const shadowSpread =\n    sizeValue < 50\n      ? Math.max(sizeValue * 0.004, 0.5) // Reduced shadow for small sizes\n      : Math.max(sizeValue * 0.008, 2)\n\n  // Adjust mask radius based on size to reduce black center in small sizes\n  const maskRadius =\n    sizeValue < 30\n      ? \"0%\"\n      : sizeValue < 50\n        ? \"5%\"\n        : sizeValue < 100\n          ? \"15%\"\n          : \"25%\"\n\n  // Use more subtle contrast for very small sizes\n  const finalContrast =\n    sizeValue < 30\n      ? 1.1 // Very subtle contrast for tiny sizes\n      : sizeValue < 50\n        ? Math.max(contrastAmount * 1.2, 1.3) // Reduced contrast for small sizes\n        : contrastAmount\n\n  return (\n    <div\n      className={cn(\"siri-orb\", className)}\n      style={\n        {\n          width: size,\n          height: size,\n          \"--bg\": finalColors.bg,\n          \"--c1\": finalColors.c1,\n          \"--c2\": finalColors.c2,\n          \"--c3\": finalColors.c3,\n          \"--animation-duration\": `${animationDuration}s`,\n          \"--blur-amount\": `${blurAmount}px`,\n          \"--contrast-amount\": finalContrast,\n          \"--dot-size\": `${dotSize}px`,\n          \"--shadow-spread\": `${shadowSpread}px`,\n          \"--mask-radius\": maskRadius,\n        } as React.CSSProperties\n      }\n    >\n      <style jsx>{`\n        @property --angle {\n          syntax: \"<angle>\";\n          inherits: false;\n          initial-value: 0deg;\n        }\n\n        .siri-orb {\n          display: grid;\n          grid-template-areas: \"stack\";\n          overflow: hidden;\n          border-radius: 50%;\n          position: relative;\n          transform: scale(1.1);\n        }\n\n        .siri-orb::before,\n        .siri-orb::after {\n          content: \"\";\n          display: block;\n          grid-area: stack;\n          width: 100%;\n          height: 100%;\n          border-radius: 50%;\n          transform: translateZ(0);\n        }\n\n        .siri-orb::before {\n          background:\n            conic-gradient(\n              from calc(var(--angle) * 2) at 25% 70%,\n              var(--c3),\n              transparent 20% 80%,\n              var(--c3)\n            ),\n            conic-gradient(\n              from calc(var(--angle) * 2) at 45% 75%,\n              var(--c2),\n              transparent 30% 60%,\n              var(--c2)\n            ),\n            conic-gradient(\n              from calc(var(--angle) * -3) at 80% 20%,\n              var(--c1),\n              transparent 40% 60%,\n              var(--c1)\n            ),\n            conic-gradient(\n              from calc(var(--angle) * 2) at 15% 5%,\n              var(--c2),\n              transparent 10% 90%,\n              var(--c2)\n            ),\n            conic-gradient(\n              from calc(var(--angle) * 1) at 20% 80%,\n              var(--c1),\n              transparent 10% 90%,\n              var(--c1)\n            ),\n            conic-gradient(\n              from calc(var(--angle) * -2) at 85% 10%,\n              var(--c3),\n              transparent 20% 80%,\n              var(--c3)\n            );\n          box-shadow: inset var(--bg) 0 0 var(--shadow-spread)\n            calc(var(--shadow-spread) * 0.2);\n          filter: blur(var(--blur-amount)) contrast(var(--contrast-amount));\n          animation: rotate var(--animation-duration) linear infinite;\n        }\n\n        .siri-orb::after {\n          background-image: radial-gradient(\n            circle at center,\n            var(--bg) var(--dot-size),\n            transparent var(--dot-size)\n          );\n          background-size: calc(var(--dot-size) * 2) calc(var(--dot-size) * 2);\n          backdrop-filter: blur(calc(var(--blur-amount) * 2))\n            contrast(calc(var(--contrast-amount) * 2));\n          mix-blend-mode: overlay;\n        }\n\n        /* Apply mask only when radius is greater than 0 */\n        .siri-orb[style*=\"--mask-radius: 0%\"]::after {\n          mask-image: none;\n        }\n\n        .siri-orb:not([style*=\"--mask-radius: 0%\"])::after {\n          mask-image: radial-gradient(\n            black var(--mask-radius),\n            transparent 75%\n          );\n        }\n\n        @keyframes rotate {\n          to {\n            --angle: 360deg;\n          }\n        }\n\n        @media (prefers-reduced-motion: reduce) {\n          .siri-orb::before {\n            animation: none;\n          }\n        }\n      `}</style>\n    </div>\n  )\n}\n\nexport default SiriOrb\n",
      "type": "registry:ui",
      "target": "components/ottoui/ui/SiriOrb.tsx"
    }
  ]
}