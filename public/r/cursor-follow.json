{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "cursor-follow",
  "type": "registry:ui",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "ottoui/CursorFollow.tsx",
      "content": "\"use client\"\n\nimport React, { useEffect, useRef, useState } from \"react\"\nimport { motion, useMotionValue, useSpring } from \"motion/react\"\n\nimport { useCursorPosition } from \"../hooks/useCursorPosition\"\n\ninterface CursorFollowProps {\n  children: React.ReactNode\n  className?: string\n}\n\nconst CIRCLE_SIZE = 16\n\nconst CursorFollow: React.FC<CursorFollowProps> = ({\n  children,\n  className = \"\",\n}) => {\n  const { x: mouseX, y: mouseY } = useCursorPosition()\n  const [cursorText, setCursorText] = useState<string | null>(null)\n  const [pendingText, setPendingText] = useState<string | null>(null)\n  const [textWidth, setTextWidth] = useState<number>(0)\n  const measureRef = useRef<HTMLSpanElement>(null)\n\n  // Motion values for smooth follow\n  const x = useMotionValue(0)\n  const y = useMotionValue(0)\n  const springX = useSpring(x, { stiffness: 350, damping: 40 })\n  const springY = useSpring(y, { stiffness: 350, damping: 40 })\n\n  // Calculate bubble width and height\n  const bubbleWidth = cursorText ? Math.max(textWidth + 32, 40) : CIRCLE_SIZE\n  const bubbleHeight = cursorText ? 40 : CIRCLE_SIZE\n\n  // Update target position on mouse move\n  useEffect(() => {\n    x.set(mouseX - bubbleWidth / 2)\n    y.set(mouseY - bubbleHeight / 2)\n  }, [mouseX, mouseY, bubbleWidth, bubbleHeight, x, y])\n\n  // Pre-measure text width before showing bubble\n  useEffect(() => {\n    if (pendingText && measureRef.current) {\n      const width = measureRef.current.offsetWidth\n      setTextWidth(width)\n      setCursorText(pendingText)\n      setPendingText(null)\n    }\n    if (!pendingText && !cursorText) {\n      setTextWidth(0)\n    }\n  }, [pendingText, cursorText])\n\n  // Handlers for child hover\n  const handleMouseOver = (e: React.MouseEvent) => {\n    const target = e.target as HTMLElement\n    const text = target.getAttribute(\"data-cursor-text\")\n    if (text) {\n      setPendingText(text)\n    }\n  }\n  const handleMouseOut = () => {\n    setCursorText(null)\n    setPendingText(null)\n  }\n\n  return (\n    <div\n      className={`relative h-full w-full ${className}`}\n      onMouseOver={handleMouseOver}\n      onMouseOut={handleMouseOut}\n      style={{ minHeight: 300, cursor: \"none\" }}\n    >\n      {children}\n      <motion.div\n        initial={{ opacity: 0, scale: 0.7 }}\n        animate={{\n          opacity: 1,\n          scale: 1,\n          transition: { duration: 0.32, ease: \"easeInOut\" },\n        }}\n        exit={{ opacity: 0, scale: 0.7 }}\n        className=\"pointer-events-none fixed z-50\"\n        style={{ left: 0, top: 0, x: springX, y: springY }}\n      >\n        <motion.div\n          layout\n          transition={{ duration: 0.32, ease: \"easeInOut\" }}\n          animate={\n            cursorText\n              ? {\n                  width: bubbleWidth,\n                  height: 40,\n                  borderRadius: 20,\n                  background: \"var(--color-brand, #6366f1)\",\n                  color: \"#fff\",\n                  paddingLeft: 16,\n                  paddingRight: 16,\n                  minWidth: 40,\n                  minHeight: 32,\n                  scale: 1.1,\n                }\n              : {\n                  width: CIRCLE_SIZE,\n                  height: CIRCLE_SIZE,\n                  borderRadius: 999,\n                  background: \"var(--color-brand, #6366f1)\",\n                  color: \"#fff\",\n                  paddingLeft: 0,\n                  paddingRight: 0,\n                  minWidth: CIRCLE_SIZE,\n                  minHeight: CIRCLE_SIZE,\n                  scale: 1,\n                }\n          }\n          className=\"flex items-center justify-center text-xs font-medium shadow-lg\"\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            position: \"relative\",\n            zIndex: 1,\n            boxShadow: \"0 2px 8px 0 rgba(0,0,0,0.10)\",\n          }}\n        >\n          {cursorText && (\n            <motion.span\n              initial={{ opacity: 0, filter: \"blur(8px)\" }}\n              animate={{ opacity: 1, filter: \"blur(0px)\" }}\n              exit={{ opacity: 0, filter: \"blur(8px)\" }}\n              transition={{ duration: 0.28, delay: 0.1, ease: \"easeInOut\" }}\n              style={{\n                whiteSpace: \"nowrap\",\n                width: \"100%\",\n                textAlign: \"center\",\n                color: \"#fff\",\n              }}\n            >\n              {cursorText}\n            </motion.span>\n          )}\n        </motion.div>\n        {/* Hidden span for pre-measuring text width */}\n        {(pendingText || cursorText) && (\n          <span\n            ref={measureRef}\n            style={{\n              position: \"absolute\",\n              visibility: \"hidden\",\n              pointerEvents: \"none\",\n              whiteSpace: \"nowrap\",\n              fontSize: \"0.75rem\",\n              fontWeight: 500,\n              paddingLeft: 16,\n              paddingRight: 16,\n              fontFamily: \"inherit\",\n            }}\n          >\n            {pendingText || cursorText}\n          </span>\n        )}\n      </motion.div>\n    </div>\n  )\n}\n\nexport default CursorFollow\n",
      "type": "registry:ui",
      "target": "components/ottoui/ui/CursorFollow.tsx"
    }
  ]
}