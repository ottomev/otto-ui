{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dynamic-island",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "files": [
    {
      "path": "ottoui/DynamicIsland.tsx",
      "content": "\"use client\"\n\nimport { ReactNode, useMemo, useState } from \"react\"\nimport {\n  Bell,\n  CloudLightning,\n  Music2,\n  Pause,\n  Phone,\n  Play,\n  SkipBack,\n  SkipForward,\n  Thermometer,\n  Timer as TimerIcon,\n} from \"lucide-react\"\nimport { AnimatePresence, motion } from \"motion/react\"\n\n// Animation variants\nconst ANIMATION_VARIANTS = {\n  \"ring-idle\": { scale: 0.9, scaleX: 0.9, bounce: 0.5 },\n  \"timer-ring\": { scale: 0.7, y: -7.5, bounce: 0.35 },\n  \"ring-timer\": { scale: 1.4, y: 7.5, bounce: 0.35 },\n  \"timer-idle\": { scale: 0.7, y: -7.5, bounce: 0.3 },\n  \"idle-timer\": { scale: 1.2, y: 5, bounce: 0.3 },\n  \"idle-ring\": { scale: 1.1, y: 3, bounce: 0.5 },\n} as const\n\nconst BOUNCE_VARIANTS = {\n  idle: 0.5,\n  \"ring-idle\": 0.5,\n  \"timer-ring\": 0.35,\n  \"ring-timer\": 0.35,\n  \"timer-idle\": 0.3,\n  \"idle-timer\": 0.3,\n  \"idle-ring\": 0.5,\n} as const\n\ninterface CustomVariant {\n  nextView?: string\n}\n\nconst variants = {\n  exit: (transition: unknown, custom: CustomVariant) => {\n    // custom is the animation variant, e.g., ANIMATION_VARIANTS[variantKey]\n    // We'll pass the target view as custom.nextView\n    if (custom && custom.nextView === \"idle\") {\n      return {\n        opacity: [1, 0],\n        scale: 0.7,\n        filter: \"blur(5px)\",\n        transition: { duration: 0.18, ease: \"ease-in\" },\n      }\n    }\n    return {\n      ...(typeof transition === 'object' && transition ? transition as Record<string, unknown> : {}),\n      opacity: [1, 0],\n      filter: \"blur(5px)\",\n    }\n  },\n}\n\n// Idle Component with Weather\nconst DefaultIdle = () => {\n  const [showTemp, setShowTemp] = useState(false)\n\n  return (\n    <motion.div\n      className=\"flex items-center gap-2 px-3 py-2\"\n      onHoverStart={() => setShowTemp(true)}\n      onHoverEnd={() => setShowTemp(false)}\n      layout\n    >\n      <AnimatePresence mode=\"wait\">\n        <motion.div\n          key=\"storm\"\n          initial={{ opacity: 0, scale: 0.8 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: 0.8 }}\n          className=\"text-foreground\"\n        >\n          <CloudLightning className=\"h-5 w-5 text-white\" />\n        </motion.div>\n      </AnimatePresence>\n\n      <AnimatePresence>\n        {showTemp && (\n          <motion.div\n            initial={{ opacity: 0, width: 0 }}\n            animate={{ opacity: 1, width: \"auto\" }}\n            exit={{ opacity: 0, width: 0 }}\n            className=\"flex items-center gap-1 overflow-hidden text-white\"\n          >\n            <Thermometer className=\"h-3 w-3\" />\n            <span className=\"pointer-events-none text-xs whitespace-nowrap text-white\">\n              12Â°C\n            </span>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </motion.div>\n  )\n}\n\n// Ring Component\nconst DefaultRing = () => {\n  return (\n    <div className=\"text-foreground flex w-64 items-center gap-3 overflow-hidden px-4 py-2\">\n      <Phone className=\"h-5 w-5 text-green-500\" />\n      <div className=\"flex-1\">\n        <p className=\"pointer-events-none text-sm font-medium text-white\">\n          Incoming Call\n        </p>\n        <p className=\"pointer-events-none text-xs text-white opacity-70\">\n          Guillermo Rauch\n        </p>\n      </div>\n      <div className=\"h-2 w-2 animate-pulse rounded-full bg-green-500\" />\n    </div>\n  )\n}\n\n// Timer Component\nconst DefaultTimer = () => {\n  const [time, setTime] = useState(60)\n\n  useMemo(() => {\n    const timer = setInterval(() => {\n      setTime((t) => (t > 0 ? t - 1 : 0))\n    }, 1000)\n    return () => clearInterval(timer)\n  }, [])\n\n  return (\n    <div className=\"text-foreground flex w-64 items-center gap-3 overflow-hidden px-4 py-2\">\n      <TimerIcon className=\"h-5 w-5 text-amber-500\" />\n      <div className=\"flex-1\">\n        <p className=\"pointer-events-none text-sm font-medium text-white\">\n          {time}s remaining\n        </p>\n      </div>\n      <div className=\"h-1 w-24 overflow-hidden rounded-full bg-white/20\">\n        <motion.div\n          className=\"h-full bg-amber-500\"\n          initial={{ width: \"100%\" }}\n          animate={{ width: \"0%\" }}\n          transition={{ duration: time, ease: \"linear\" }}\n        />\n      </div>\n    </div>\n  )\n}\n\n// Notification Component\nconst Notification = () => (\n  <div className=\"text-foreground flex w-64 items-center gap-3 overflow-hidden px-4 py-2\">\n    <Bell className=\"h-5 w-5 text-yellow-400\" />\n    <div className=\"flex-1\">\n      <p className=\"pointer-events-none text-sm font-medium text-white\">\n        New Message\n      </p>\n      <p className=\"pointer-events-none text-xs text-white opacity-70\">\n        You have a new notification!\n      </p>\n    </div>\n    <span className=\"rounded-full bg-yellow-400/40 px-2 py-0.5 text-xs text-yellow-500\">\n      1\n    </span>\n  </div>\n)\n\n// Music Player Component\nconst MusicPlayer = () => {\n  const [playing, setPlaying] = useState(true)\n  return (\n    <div className=\"text-foreground flex w-72 items-center gap-3 overflow-hidden px-4 py-2\">\n      <Music2 className=\"h-5 w-5 text-pink-500\" />\n      <div className=\"min-w-0 flex-1\">\n        <p className=\"pointer-events-none truncate text-sm font-medium text-white\">\n          Lofi Chill Beats\n        </p>\n        <p className=\"pointer-events-none truncate text-xs text-white opacity-70\">\n          DJ Smooth\n        </p>\n      </div>\n      <button\n        onClick={() => setPlaying(false)}\n        className=\"rounded-full p-1 hover:bg-white/30\"\n      >\n        <SkipBack className=\"h-4 w-4 text-white\" />\n      </button>\n      <button\n        onClick={() => setPlaying((p) => !p)}\n        className=\"rounded-full p-1 hover:bg-white/30\"\n      >\n        {playing ? (\n          <Pause className=\"h-4 w-4 text-white\" />\n        ) : (\n          <Play className=\"h-4 w-4 text-white\" />\n        )}\n      </button>\n      <button\n        onClick={() => setPlaying(true)}\n        className=\"rounded-full p-1 hover:bg-white/30\"\n      >\n        <SkipForward className=\"h-4 w-4 text-white\" />\n      </button>\n    </div>\n  )\n}\n\ntype View = \"idle\" | \"ring\" | \"timer\" | \"notification\" | \"music\"\n\nexport interface DynamicIslandProps {\n  view?: View\n  onViewChange?: (view: View) => void\n  idleContent?: ReactNode\n  ringContent?: ReactNode\n  timerContent?: ReactNode\n  className?: string\n}\n\nexport default function DynamicIsland({\n  view: controlledView,\n  onViewChange,\n  idleContent,\n  ringContent,\n  timerContent,\n  className = \"\",\n}: DynamicIslandProps) {\n  const [internalView, setInternalView] = useState<View>(\"idle\")\n  const [variantKey, setVariantKey] = useState<string>(\"idle\")\n\n  const view = controlledView ?? internalView\n\n  const content = useMemo(() => {\n    switch (view) {\n      case \"ring\":\n        return ringContent ?? <DefaultRing />\n      case \"timer\":\n        return timerContent ?? <DefaultTimer />\n      case \"notification\":\n        return <Notification />\n      case \"music\":\n        return <MusicPlayer />\n      default:\n        return idleContent ?? <DefaultIdle />\n    }\n  }, [view, idleContent, ringContent, timerContent])\n\n  const handleViewChange = (newView: View) => {\n    if (view === newView) return\n    setVariantKey(`${view}-${newView}`)\n    if (onViewChange) onViewChange(newView)\n    else setInternalView(newView)\n  }\n\n  return (\n    <div className={`h-[200px] ${className}`}>\n      <div className=\"relative flex h-full w-full flex-col justify-center\">\n        <motion.div\n          layout\n          transition={{\n            type: \"spring\",\n            bounce:\n              BOUNCE_VARIANTS[variantKey as keyof typeof BOUNCE_VARIANTS] ??\n              0.5,\n          }}\n          style={{ borderRadius: 32 }}\n          className=\"mx-auto w-fit min-w-[100px] overflow-hidden rounded-full bg-black\"\n        >\n          <motion.div\n            transition={{\n              type: \"spring\",\n              bounce:\n                BOUNCE_VARIANTS[variantKey as keyof typeof BOUNCE_VARIANTS] ??\n                0.5,\n            }}\n            initial={{\n              scale: 0.9,\n              opacity: 0,\n              filter: \"blur(5px)\",\n              originX: 0.5,\n              originY: 0.5,\n            }}\n            animate={{\n              scale: 1,\n              opacity: 1,\n              filter: \"blur(0px)\",\n              originX: 0.5,\n              originY: 0.5,\n              transition: { delay: 0.05 },\n            }}\n            key={view}\n          >\n            {content}\n          </motion.div>\n        </motion.div>\n\n        <div className=\"bg-background absolute bottom-2 left-1/2 z-10 flex -translate-x-1/2 justify-center gap-1 rounded-full border p-1\">\n          {[\n            { key: \"idle\", icon: <CloudLightning className=\"size-3\" /> },\n            { key: \"ring\", icon: <Phone className=\"size-3\" /> },\n            { key: \"timer\", icon: <TimerIcon className=\"size-3\" /> },\n            { key: \"notification\", icon: <Bell className=\"size-3\" /> },\n            { key: \"music\", icon: <Music2 className=\"size-3\" /> },\n          ].map(({ key, icon }) => (\n            <button\n              type=\"button\"\n              className=\"bg-primary flex size-8 cursor-pointer items-center justify-center rounded-full border px-2\"\n              onClick={() => {\n                if (view !== key) {\n                  setVariantKey(`${view}-${key}`)\n                  handleViewChange(key as View)\n                }\n              }}\n              key={key}\n              aria-label={key}\n            >\n              {icon}\n            </button>\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:ui",
      "target": "components/ottoui/ui/DynamicIsland.tsx"
    }
  ]
}