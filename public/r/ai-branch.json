{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ai-branch",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react",
    "motion",
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "path": "utils/cn.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "type": "registry:lib",
      "target": "lib/utils/cn.ts"
    },
    {
      "path": "ottoui/AiBranch.tsx",
      "content": "\"use client\"\n\nimport type { HTMLAttributes, ReactElement, ReactNode } from \"react\"\nimport { createContext, useContext, useEffect, useMemo, useState } from \"react\"\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  Clock,\n  Copy,\n  MessageSquare,\n  Pencil,\n} from \"lucide-react\"\nimport { motion } from \"motion/react\"\n\nimport { cn } from \"@/lib/utils/cn\"\n\ntype AIBranchContextType = {\n  currentBranch: number\n  totalBranches: number\n  goToPrevious: () => void\n  goToNext: () => void\n  branches: ReactElement[]\n  setBranches: (branches: ReactElement[]) => void\n}\n\nconst AIBranchContext = createContext<AIBranchContextType | null>(null)\n\nconst useAIBranch = () => {\n  const context = useContext(AIBranchContext)\n  if (!context) {\n    throw new Error(\"AIBranch components must be used within AIBranch\")\n  }\n  return context\n}\n\nexport type AIBranchProps = HTMLAttributes<HTMLDivElement> & {\n  defaultBranch?: number\n  onBranchChange?: (branchIndex: number) => void\n}\n\nexport const AIBranch = ({\n  defaultBranch = 0,\n  onBranchChange,\n  className,\n  ...props\n}: AIBranchProps) => {\n  const [currentBranch, setCurrentBranch] = useState(defaultBranch)\n  const [branches, setBranches] = useState<ReactElement[]>([])\n\n  const handleBranchChange = (newBranch: number) => {\n    setCurrentBranch(newBranch)\n    onBranchChange?.(newBranch)\n  }\n\n  const goToPrevious = () => {\n    const newBranch =\n      currentBranch > 0 ? currentBranch - 1 : branches.length - 1\n    handleBranchChange(newBranch)\n  }\n\n  const goToNext = () => {\n    const newBranch =\n      currentBranch < branches.length - 1 ? currentBranch + 1 : 0\n    handleBranchChange(newBranch)\n  }\n\n  const contextValue: AIBranchContextType = {\n    currentBranch,\n    totalBranches: branches.length,\n    goToPrevious,\n    goToNext,\n    branches,\n    setBranches,\n  }\n\n  return (\n    <AIBranchContext.Provider value={contextValue}>\n      <div\n        className={cn(\"grid w-full gap-2 [&>div]:pb-0\", className)}\n        {...props}\n      />\n    </AIBranchContext.Provider>\n  )\n}\n\nexport type AIBranchMessagesProps = {\n  children: ReactElement | ReactElement[]\n}\n\nexport const AIBranchMessages = ({ children }: AIBranchMessagesProps) => {\n  const { currentBranch, setBranches, branches } = useAIBranch()\n  const childrenArray = useMemo(\n    () => (Array.isArray(children) ? children : [children]),\n    [children]\n  )\n\n  // Use useEffect to update branches when they change\n  useEffect(() => {\n    if (branches.length !== childrenArray.length) {\n      setBranches(childrenArray)\n    }\n  }, [childrenArray, branches, setBranches])\n\n  return childrenArray.map((branch, index) => (\n    <motion.div\n      key={`branch-${index}-${currentBranch}`}\n      initial={{ opacity: 0, y: 10 }}\n      animate={{\n        opacity: index === currentBranch ? 1 : 0,\n        y: index === currentBranch ? 0 : 10,\n        display: index === currentBranch ? \"block\" : \"none\",\n      }}\n      transition={{\n        duration: 0.3,\n        type: \"spring\",\n        stiffness: 300,\n        damping: 30,\n      }}\n      className={cn(\n        \"grid gap-2 [&>div]:pb-0\",\n        index === currentBranch ? \"block\" : \"hidden\"\n      )}\n    >\n      {branch}\n    </motion.div>\n  ))\n}\n\nexport type AIBranchSelectorProps = HTMLAttributes<HTMLDivElement> & {\n  from: \"user\" | \"assistant\"\n}\n\nexport const AIBranchSelector = ({\n  className,\n  from,\n  ...props\n}: AIBranchSelectorProps) => {\n  const { totalBranches } = useAIBranch()\n\n  // Don't render if there's only one branch\n  if (totalBranches <= 1) {\n    return null\n  }\n\n  return (\n    <div\n      className={cn(\n        \"flex items-center gap-2 self-end px-10\",\n        from === \"assistant\" ? \"justify-start\" : \"justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport type AIBranchPreviousProps = {\n  className?: string\n  children?: ReactNode\n}\n\nexport const AIBranchPrevious = ({\n  className,\n  children,\n}: AIBranchPreviousProps) => {\n  const { goToPrevious, totalBranches } = useAIBranch()\n\n  return (\n    <motion.button\n      aria-label=\"Previous branch\"\n      className={cn(\n        \"text-muted-foreground size-7 shrink-0 rounded-full transition-colors\",\n        \"hover:bg-accent hover:text-foreground\",\n        \"disabled:pointer-events-none disabled:opacity-50\",\n        \"flex items-center justify-center\",\n        className\n      )}\n      disabled={totalBranches <= 1}\n      onClick={goToPrevious}\n      type=\"button\"\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n      transition={{ type: \"spring\", stiffness: 400, damping: 25 }}\n    >\n      {children ?? <ChevronLeftIcon size={14} />}\n    </motion.button>\n  )\n}\n\nexport type AIBranchNextProps = {\n  className?: string\n  children?: ReactNode\n}\n\nexport const AIBranchNext = ({ className, children }: AIBranchNextProps) => {\n  const { goToNext, totalBranches } = useAIBranch()\n\n  return (\n    <motion.button\n      aria-label=\"Next branch\"\n      className={cn(\n        \"text-muted-foreground size-7 shrink-0 rounded-full transition-colors\",\n        \"hover:bg-accent hover:text-foreground\",\n        \"disabled:pointer-events-none disabled:opacity-50\",\n        \"flex items-center justify-center\",\n        className\n      )}\n      disabled={totalBranches <= 1}\n      onClick={goToNext}\n      type=\"button\"\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n      transition={{ type: \"spring\", stiffness: 400, damping: 25 }}\n    >\n      {children ?? <ChevronRightIcon size={14} />}\n    </motion.button>\n  )\n}\n\nexport type AIBranchPageProps = {\n  className?: string\n}\n\nexport const AIBranchPage = ({ className }: AIBranchPageProps) => {\n  const { currentBranch, totalBranches } = useAIBranch()\n\n  return (\n    <span\n      className={cn(\n        \"text-muted-foreground text-xs font-medium tabular-nums\",\n        className\n      )}\n    >\n      {currentBranch + 1} of {totalBranches}\n    </span>\n  )\n}\n\n// Updated interface for conversation branches\nexport interface AIBranchData {\n  id: string\n  userMessage: string\n  aiResponse: string\n  timestamp: Date\n  isActive: boolean\n}\n\n// Export the type alias for backward compatibility\nexport type AIBranch = AIBranchData\n\ninterface LegacyAiBranchProps {\n  branches: AIBranchData[]\n  onBranchSelect: (branchId: string) => void\n  className?: string\n}\n\n// Updated legacy component to show conversation branches\nexport function LegacyAiBranch({\n  branches,\n  onBranchSelect,\n  className,\n}: LegacyAiBranchProps) {\n  const [isExpanded, setIsExpanded] = useState(false)\n  const [currentBranchIndex, setCurrentBranchIndex] = useState(() =>\n    branches.findIndex((branch) => branch.isActive)\n  )\n\n  const activeBranch = branches[currentBranchIndex]\n  const inactiveBranches = branches.filter(\n    (_, index) => index !== currentBranchIndex\n  )\n\n  const goToPrevious = () => {\n    const newIndex =\n      currentBranchIndex > 0 ? currentBranchIndex - 1 : branches.length - 1\n    setCurrentBranchIndex(newIndex)\n    onBranchSelect(branches[newIndex].id)\n  }\n\n  const goToNext = () => {\n    const newIndex =\n      currentBranchIndex < branches.length - 1 ? currentBranchIndex + 1 : 0\n    setCurrentBranchIndex(newIndex)\n    onBranchSelect(branches[newIndex].id)\n  }\n\n  return (\n    <div className={cn(\"w-full max-w-2xl\", className)}>\n      {/* Active Branch Display */}\n      {activeBranch && (\n        <motion.div\n          initial={{ opacity: 0, y: 10 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{\n            duration: 0.3,\n            type: \"spring\",\n            stiffness: 300,\n            damping: 30,\n          }}\n          className=\"mb-4 space-y-4\"\n        >\n          {/* User Message with Branch Navigation */}\n          <div className=\"flex justify-end\">\n            <div className=\"flex flex-col items-end gap-2\">\n              <div className=\"bg-brand max-w-full rounded-lg p-3 text-white\">\n                <p className=\"text-sm\">{activeBranch.userMessage}</p>\n              </div>\n\n              {/* Branch Navigation Controls */}\n              {branches.length > 1 && (\n                <div className=\"flex items-center gap-1\">\n                  <motion.button\n                    aria-label=\"Copy message\"\n                    className={cn(\n                      \"text-foreground/70 size-6 shrink-0 rounded transition-colors\",\n                      \"hover:bg-accent hover:text-white\",\n                      \"flex items-center justify-center\"\n                    )}\n                    type=\"button\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    transition={{ type: \"spring\", stiffness: 400, damping: 25 }}\n                  >\n                    <Copy className=\"h-3 w-3\" />\n                  </motion.button>\n\n                  <motion.button\n                    aria-label=\"Edit message\"\n                    className={cn(\n                      \"text-foreground/70 size-6 shrink-0 rounded transition-colors\",\n                      \"hover:bg-accent hover:text-white\",\n                      \"flex items-center justify-center\"\n                    )}\n                    type=\"button\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    transition={{ type: \"spring\", stiffness: 400, damping: 25 }}\n                  >\n                    <Pencil className=\"h-3 w-3\" />\n                  </motion.button>\n\n                  <motion.button\n                    aria-label=\"Previous branch\"\n                    className={cn(\n                      \"text-foreground/70 size-6 shrink-0 rounded transition-colors\",\n                      \"hover:bg-accent hover:text-white\",\n                      \"disabled:pointer-events-none disabled:opacity-50\",\n                      \"flex items-center justify-center\"\n                    )}\n                    disabled={branches.length <= 1}\n                    onClick={goToPrevious}\n                    type=\"button\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    transition={{ type: \"spring\", stiffness: 400, damping: 25 }}\n                  >\n                    <ChevronLeftIcon size={12} />\n                  </motion.button>\n\n                  <span className=\"text-foreground/70 text-xs font-medium tabular-nums\">\n                    {currentBranchIndex + 1}/{branches.length}\n                  </span>\n\n                  <motion.button\n                    aria-label=\"Next branch\"\n                    className={cn(\n                      \"text-foreground/70 size-6 shrink-0 rounded transition-colors\",\n                      \"hover:bg-accent hover:text-white\",\n                      \"disabled:pointer-events-none disabled:opacity-50\",\n                      \"flex items-center justify-center\"\n                    )}\n                    disabled={branches.length <= 1}\n                    onClick={goToNext}\n                    type=\"button\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    transition={{ type: \"spring\", stiffness: 400, damping: 25 }}\n                  >\n                    <ChevronRightIcon size={12} />\n                  </motion.button>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* AI Response */}\n          <div className=\"flex justify-start\">\n            <div className=\"border-brand/30 bg-brand/10 max-w-[80%] rounded-lg border p-3\">\n              <p className=\"text-sm text-gray-900 dark:text-gray-100\">\n                {activeBranch.aiResponse}\n              </p>\n            </div>\n          </div>\n        </motion.div>\n      )}\n    </div>\n  )\n}\n\n// Export the legacy component as the default for backward compatibility\nexport { LegacyAiBranch as AiBranch }\n\n// Add default export for lazy loading\nexport default LegacyAiBranch\n",
      "type": "registry:ui",
      "target": "components/ottoui/ui/AiBranch.tsx"
    }
  ]
}