{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "user-account-avatar",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-popover",
    "lucide-react",
    "motion"
  ],
  "files": [
    {
      "path": "ottoui/UserAccountAvatar.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport * as Popover from \"@radix-ui/react-popover\"\nimport { Eye, Package, User } from \"lucide-react\"\nimport { AnimatePresence, motion } from \"motion/react\"\n\nexport interface UserData {\n  name: string\n  email: string\n  avatar: string\n}\n\nexport interface Order {\n  id: string\n  date: string\n  status: \"processing\" | \"shipped\" | \"delivered\"\n  progress: number\n}\n\nexport interface UserAccountAvatarProps {\n  user?: UserData\n  orders?: Order[]\n  onProfileSave?: (user: UserData) => void\n  onOrderView?: (orderId: string) => void\n  className?: string\n}\n\nconst initialUserData: UserData = {\n  name: \"John Doe\",\n  email: \"john@example.com\",\n  avatar: \"https://github.com/educlopez.png\",\n}\n\nconst mockOrders: Order[] = [\n  { id: \"ORD001\", date: \"2023-03-15\", status: \"delivered\", progress: 100 },\n  { id: \"ORD002\", date: \"2023-03-20\", status: \"shipped\", progress: 66 },\n]\n\nexport default function UserAccountAvatar({\n  user = initialUserData,\n  orders = mockOrders,\n  onProfileSave,\n  onOrderView,\n  className = \"\",\n}: UserAccountAvatarProps) {\n  const [activeSection, setActiveSection] = useState<string | null>(null)\n  const [userData, setUserData] = useState<UserData>(user)\n\n  const handleSectionClick = (section: string) => {\n    setActiveSection(activeSection === section ? null : section)\n  }\n\n  const handleProfileSave = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    const formData = new FormData(e.currentTarget)\n    const updatedUser = {\n      ...userData,\n      name: formData.get(\"name\") as string,\n      email: formData.get(\"email\") as string,\n    }\n    setUserData(updatedUser)\n    if (onProfileSave) onProfileSave(updatedUser)\n    setActiveSection(null)\n  }\n\n  const renderEditProfile = () => (\n    <form onSubmit={handleProfileSave} className=\"flex flex-col gap-2 p-4\">\n      <label\n        htmlFor=\"name\"\n        className=\"text-primary-foreground text-xs font-medium\"\n      >\n        Name\n      </label>\n      <input\n        id=\"name\"\n        name=\"name\"\n        defaultValue={userData.name}\n        className=\"bg-primary text-foreground rounded-sm border p-2 text-xs\"\n        placeholder=\"Name\"\n      />\n      <label\n        htmlFor=\"email\"\n        className=\"text-primary-foreground text-xs font-medium\"\n      >\n        Email\n      </label>\n      <input\n        id=\"email\"\n        name=\"email\"\n        defaultValue={userData.email}\n        className=\"bg-primary text-foreground rounded-sm border p-2 text-xs\"\n        placeholder=\"Email\"\n      />\n\n      <button\n        type=\"submit\"\n        className=\"bg-smooth-300 text-foreground hover:bg-smooth-400 cursor-pointer rounded-sm px-4 py-2 text-sm\"\n      >\n        Save\n      </button>\n    </form>\n  )\n\n  const renderLastOrders = () => (\n    <div className=\"flex flex-col gap-2 p-2\">\n      {orders.map((order) => (\n        <div\n          key={order.id}\n          className=\"bg-primary flex flex-col items-center justify-between gap-3 rounded-sm border p-2 text-xs\"\n        >\n          <div className=\"flex w-full items-center justify-between\">\n            <div className=\"font-medium\">{order.id}</div>\n            <div className=\"text-primary-foreground\">{order.date}</div>\n          </div>\n          <div className=\"flex w-full items-center gap-2\">\n            <div className=\"w-full\">\n              <div className=\"flex justify-between\">\n                <span>{order.status}</span>\n                <span>{order.progress}%</span>\n              </div>\n              <div className=\"mt-1 h-1 w-full rounded-sm bg-gray-200\">\n                <div\n                  className={`h-full rounded ${\n                    order.status === \"processing\"\n                      ? \"bg-blue-500\"\n                      : order.status === \"shipped\"\n                        ? \"bg-yellow-500\"\n                        : \"bg-green-500\"\n                  }`}\n                  style={{ width: `${order.progress}%` }}\n                />\n              </div>\n            </div>\n            <button\n              className=\"bg-background rounded-sm border p-1\"\n              aria-label=\"View Order\"\n              onClick={() => onOrderView && onOrderView(order.id)}\n            >\n              <Eye size={14} />\n            </button>\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n\n  return (\n    <Popover.Root>\n      <Popover.Trigger asChild>\n        <button\n          className={`bg-background flex cursor-pointer items-center gap-2 rounded-full border ${className}`}\n        >\n          <img\n            src={userData.avatar}\n            alt=\"User Avatar\"\n            width={48}\n            height={48}\n            className=\"rounded-full\"\n          />\n        </button>\n      </Popover.Trigger>\n      <Popover.Portal>\n        <Popover.Content\n          className=\"bg-background w-48 overflow-hidden rounded-lg border text-sm shadow-lg\"\n          sideOffset={5}\n        >\n          <motion.div\n            initial={{ height: \"auto\" }}\n            animate={{ height: \"auto\" }}\n            transition={{ type: \"spring\", duration: 0.3, bounce: 0 }}\n          >\n            <div className=\"flex flex-col\">\n              <div\n                className=\"hover:bg-smooth-200 cursor-pointer p-2\"\n                onClick={() => handleSectionClick(\"profile\")}\n              >\n                <User size={16} className=\"mr-2 inline\" />\n                Edit Profile\n              </div>\n              <AnimatePresence initial={false}>\n                {activeSection === \"profile\" && (\n                  <motion.div\n                    initial={{ opacity: 0, height: 0, filter: \"blur(10px)\" }}\n                    animate={{\n                      opacity: 1,\n                      height: \"auto\",\n                      filter: \"blur(0px)\",\n                    }}\n                    exit={{ opacity: 0, height: 0, filter: \"blur(10px)\" }}\n                    transition={{ type: \"spring\", duration: 0.3, bounce: 0 }}\n                  >\n                    {renderEditProfile()}\n                  </motion.div>\n                )}\n              </AnimatePresence>\n              <div\n                className=\"hover:bg-smooth-200 cursor-pointer p-2\"\n                onClick={() => handleSectionClick(\"orders\")}\n              >\n                <Package size={16} className=\"mr-2 inline\" />\n                Last Orders\n              </div>\n              <AnimatePresence initial={false}>\n                {activeSection === \"orders\" && (\n                  <motion.div\n                    initial={{ opacity: 0, height: 0, filter: \"blur(10px)\" }}\n                    animate={{\n                      opacity: 1,\n                      height: \"auto\",\n                      filter: \"blur(0px)\",\n                    }}\n                    exit={{ opacity: 0, height: 0, filter: \"blur(10px)\" }}\n                    transition={{ type: \"spring\", duration: 0.3, bounce: 0 }}\n                  >\n                    {renderLastOrders()}\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </div>\n          </motion.div>\n        </Popover.Content>\n      </Popover.Portal>\n    </Popover.Root>\n  )\n}\n",
      "type": "registry:ui",
      "target": "components/ottoui/ui/UserAccountAvatar.tsx"
    }
  ]
}