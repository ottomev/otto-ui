{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "number-flow",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react",
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "path": "utils/cn.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "type": "registry:lib",
      "target": "lib/utils/cn.ts"
    },
    {
      "path": "ottoui/NumberFlow.tsx",
      "content": "\"use client\"\n\nimport { useEffect, useRef, useState } from \"react\"\nimport { Minus, Plus } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils/cn\"\n\nexport interface NumberFlowProps {\n  value?: number\n  onChange?: (value: number) => void\n  min?: number\n  max?: number\n  className?: string\n  digitClassName?: string\n  buttonClassName?: string\n}\n\nexport default function NumberFlow({\n  value: controlledValue,\n  onChange,\n  min = 0,\n  max = 999,\n  className = \"\",\n  digitClassName = \"\",\n  buttonClassName = \"\",\n}: NumberFlowProps) {\n  const [internalValue, setInternalValue] = useState(0)\n  const [prevValue, setPrevValue] = useState(0)\n\n  const value = controlledValue !== undefined ? controlledValue : internalValue\n\n  const prevValueRef = useRef<HTMLElement>(null)\n  const nextValueRef = useRef<HTMLElement>(null)\n  const prevValueTens = useRef<HTMLElement>(null)\n  const nextValueTens = useRef<HTMLElement>(null)\n  const prevValueHunds = useRef<HTMLElement>(null)\n  const nextValueHunds = useRef<HTMLElement>(null)\n\n  const setValue = (val: number) => {\n    if (onChange) onChange(val)\n    else setInternalValue(val)\n  }\n\n  const add = () => {\n    if (value < max) {\n      setPrevValue(value)\n      setValue(value + 1)\n    }\n  }\n\n  const subtract = () => {\n    if (value > min) {\n      setPrevValue(value)\n      setValue(value - 1)\n    }\n  }\n\n  useEffect(() => {\n    const prev = prevValueRef.current\n    const next = nextValueRef.current\n    const prevTens = prevValueTens.current\n    const nextTens = nextValueTens.current\n    const prevHunds = prevValueHunds.current\n    const nextHunds = nextValueHunds.current\n\n    if (prev && next) {\n      if (value > prevValue) {\n        prev.classList.add(\"slide-out-up\")\n        next.classList.add(\"slide-in-up\")\n      } else {\n        prev.classList.add(\"slide-out-down\")\n        next.classList.add(\"slide-in-down\")\n      }\n\n      const handleAnimationEnd = () => {\n        prev.classList.remove(\"slide-out-up\", \"slide-out-down\")\n        next.classList.remove(\"slide-in-up\", \"slide-in-down\")\n        prev.removeEventListener(\"animationend\", handleAnimationEnd)\n      }\n\n      prev.addEventListener(\"animationend\", handleAnimationEnd)\n    }\n\n    if (\n      prevTens &&\n      nextTens &&\n      Math.floor(value / 10) !== Math.floor(prevValue / 10)\n    ) {\n      if (Math.floor(value / 10) > Math.floor(prevValue / 10)) {\n        prevTens.classList.add(\"slide-out-up\")\n        nextTens.classList.add(\"slide-in-up\")\n      } else if (Math.floor(value / 10) < Math.floor(prevValue / 10)) {\n        prevTens.classList.add(\"slide-out-down\")\n        nextTens.classList.add(\"slide-in-down\")\n      }\n\n      const handleAnimationEndTens = () => {\n        prevTens.classList.remove(\"slide-out-up\", \"slide-out-down\")\n        nextTens.classList.remove(\"slide-in-up\", \"slide-in-down\")\n        prevTens.removeEventListener(\"animationend\", handleAnimationEndTens)\n      }\n\n      prevTens.addEventListener(\"animationend\", handleAnimationEndTens)\n    }\n\n    if (\n      prevHunds &&\n      nextHunds &&\n      Math.floor(value / 100) !== Math.floor(prevValue / 100)\n    ) {\n      if (Math.floor(value / 100) > Math.floor(prevValue / 100)) {\n        prevHunds.classList.add(\"slide-out-up\")\n        nextHunds.classList.add(\"slide-in-up\")\n      } else if (Math.floor(value / 100) < Math.floor(prevValue / 100)) {\n        prevHunds.classList.add(\"slide-out-down\")\n        nextHunds.classList.add(\"slide-in-down\")\n      }\n\n      const handleAnimationEndHunds = () => {\n        prevHunds.classList.remove(\"slide-out-up\", \"slide-out-down\")\n        nextHunds.classList.remove(\"slide-in-up\", \"slide-in-down\")\n        prevHunds.removeEventListener(\"animationend\", handleAnimationEndHunds)\n      }\n\n      prevHunds.addEventListener(\"animationend\", handleAnimationEndHunds)\n    }\n  }, [value, prevValue])\n\n  return (\n    <div\n      className={cn(\n        \"flex min-h-screen flex-col items-center justify-center gap-8\",\n        className\n      )}\n    >\n      <div className=\"bg-background flex items-center gap-2 rounded-xl border p-4\">\n        <div className={cn(\"flex items-center gap-1\", digitClassName)}>\n          <div\n            className={cn(\n              \"bg-primary relative h-16 w-12 overflow-hidden rounded-lg border\"\n            )}\n          >\n            <span\n              className=\"text-foreground absolute inset-0 flex items-center justify-center text-2xl font-semibold\"\n              ref={prevValueHunds}\n              style={{ transform: `translateY(-100%)` }}\n            >\n              {Math.floor(prevValue / 100)}\n            </span>\n            <span\n              className=\"text-foreground absolute inset-0 flex items-center justify-center text-2xl font-semibold\"\n              ref={nextValueHunds}\n              style={{ transform: `translateY(0%)` }}\n            >\n              {Math.floor(value / 100)}\n            </span>\n          </div>\n          <div\n            className={cn(\n              \"bg-primary relative h-16 w-12 overflow-hidden rounded-lg border\"\n            )}\n          >\n            <span\n              className=\"text-foreground absolute inset-0 flex items-center justify-center text-2xl font-semibold\"\n              ref={prevValueTens}\n              style={{ transform: `translateY(-100%)` }}\n            >\n              {Math.floor(prevValue / 10) % 10}\n            </span>\n            <span\n              className=\"text-foreground absolute inset-0 flex items-center justify-center text-2xl font-semibold\"\n              ref={nextValueTens}\n              style={{ transform: `translateY(0%)` }}\n            >\n              {Math.floor(value / 10) % 10}\n            </span>\n          </div>\n          <div\n            className={cn(\n              \"bg-primary relative h-16 w-12 overflow-hidden rounded-lg border\"\n            )}\n          >\n            <span\n              className=\"text-foreground absolute inset-0 flex items-center justify-center text-2xl font-semibold\"\n              ref={prevValueRef}\n              style={{ transform: `translateY(-100%)` }}\n            >\n              {prevValue % 10}\n            </span>\n            <span\n              className=\"text-foreground absolute inset-0 flex items-center justify-center text-2xl font-semibold\"\n              ref={nextValueRef}\n              style={{ transform: `translateY(0%)` }}\n            >\n              {value % 10}\n            </span>\n          </div>\n        </div>\n\n        <div className=\"flex flex-col gap-1\">\n          <button\n            onClick={add}\n            disabled={value >= max}\n            aria-label=\"Increase number\"\n            className={cn(\n              \"bg-background relative w-auto cursor-pointer overflow-hidden rounded-md border p-2 disabled:cursor-not-allowed disabled:opacity-50\",\n              buttonClassName\n            )}\n          >\n            <Plus className=\"h-3 w-3\" />\n          </button>\n          <button\n            onClick={subtract}\n            disabled={value <= min}\n            aria-label=\"Decrease number\"\n            className={cn(\n              \"bg-background relative w-auto cursor-pointer overflow-hidden rounded-md border p-2 disabled:cursor-not-allowed disabled:opacity-50\",\n              buttonClassName\n            )}\n          >\n            <Minus className=\"h-3 w-3\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:ui",
      "target": "components/ottoui/ui/NumberFlow.tsx"
    }
  ]
}