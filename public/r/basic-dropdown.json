{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "basic-dropdown",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "files": [
    {
      "path": "ottoui/BasicDropdown.tsx",
      "content": "\"use client\"\n\nimport { useEffect, useRef, useState } from \"react\"\nimport { ChevronDown } from \"lucide-react\"\nimport { AnimatePresence, motion } from \"motion/react\"\n\ninterface DropdownItem {\n  id: string | number\n  label: string\n  icon?: React.ReactNode\n}\n\ninterface BasicDropdownProps {\n  label: string\n  items: DropdownItem[]\n  onChange?: (item: DropdownItem) => void\n  className?: string\n}\n\nexport default function BasicDropdown({\n  label,\n  items,\n  onChange,\n  className = \"\",\n}: BasicDropdownProps) {\n  const [isOpen, setIsOpen] = useState(false)\n  const [selectedItem, setSelectedItem] = useState<DropdownItem | null>(null)\n  const dropdownRef = useRef<HTMLDivElement>(null)\n\n  const handleItemSelect = (item: DropdownItem) => {\n    setSelectedItem(item)\n    setIsOpen(false)\n    onChange?.(item)\n  }\n\n  // Close dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        dropdownRef.current &&\n        !dropdownRef.current.contains(event.target as Node)\n      ) {\n        setIsOpen(false)\n      }\n    }\n\n    document.addEventListener(\"mousedown\", handleClickOutside)\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside)\n  }, [])\n\n  return (\n    <div ref={dropdownRef} className={`relative inline-block ${className}`}>\n      <button\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"bg-background hover:bg-primary flex w-full items-center justify-between gap-2 rounded-lg border px-4 py-2 text-left transition-colors\"\n      >\n        <span className=\"block truncate\">\n          {selectedItem ? selectedItem.label : label}\n        </span>\n        <motion.div\n          animate={{ rotate: isOpen ? 180 : 0 }}\n          transition={{ duration: 0.2 }}\n        >\n          <ChevronDown className=\"h-4 w-4\" />\n        </motion.div>\n      </button>\n\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            className=\"bg-background absolute left-0 z-10 mt-1 w-full origin-top rounded-lg border shadow-lg\"\n            initial={{ opacity: 0, y: -10, scaleY: 0.8 }}\n            animate={{ opacity: 1, y: 0, scaleY: 1 }}\n            exit={{\n              opacity: 0,\n              y: -10,\n              scaleY: 0.8,\n              transition: { duration: 0.2 },\n            }}\n            transition={{ type: \"spring\", bounce: 0.15, duration: 0.4 }}\n          >\n            <ul\n              className=\"py-2\"\n              role=\"menu\"\n              aria-orientation=\"vertical\"\n              aria-labelledby=\"dropdown-button\"\n            >\n              {items.map((item) => (\n                <motion.li\n                  key={item.id}\n                  role=\"menuitem\"\n                  initial={{ opacity: 0, x: -10 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  exit={{ opacity: 0, x: -10 }}\n                  transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n                  className=\"block\"\n                  whileHover={{ x: 5 }}\n                >\n                  <button\n                    onClick={() => handleItemSelect(item)}\n                    className={`flex w-full items-center px-4 py-2 text-left text-sm ${\n                      selectedItem?.id === item.id\n                        ? \"text-brand font-medium\"\n                        : \"\"\n                    }`}\n                  >\n                    {item.icon && <span className=\"mr-2\">{item.icon}</span>}\n                    {item.label}\n\n                    {selectedItem?.id === item.id && (\n                      <motion.span\n                        className=\"ml-auto\"\n                        initial={{ scale: 0 }}\n                        animate={{ scale: 1 }}\n                        transition={{\n                          type: \"spring\",\n                          stiffness: 300,\n                          damping: 20,\n                        }}\n                      >\n                        <svg\n                          className=\"text-brand h-4 w-4\"\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          viewBox=\"0 0 24 24\"\n                        >\n                          <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={2}\n                            d=\"M5 13l4 4L19 7\"\n                          />\n                        </svg>\n                      </motion.span>\n                    )}\n                  </button>\n                </motion.li>\n              ))}\n            </ul>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  )\n}\n",
      "type": "registry:ui",
      "target": "components/ottoui/ui/BasicDropdown.tsx"
    }
  ]
}