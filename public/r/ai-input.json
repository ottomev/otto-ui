{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ai-input",
  "type": "registry:ui",
  "dependencies": [
    "class-variance-authority",
    "motion"
  ],
  "files": [
    {
      "path": "ottoui/AiInput.tsx",
      "content": "\"use client\"\n\nimport React from \"react\"\nimport { cx } from \"class-variance-authority\"\nimport { AnimatePresence, motion } from \"motion/react\"\n\nimport { Button } from \"@/components/button\"\nimport { useClickOutside } from \"@/components/ottoui/hooks/use-click-outside\"\nimport SiriOrb from \"@/components/ottoui/ui/SiriOrb\"\n\nconst SPEED = 1\n\ninterface FooterContext {\n  showFeedback: boolean\n  success: boolean\n  openFeedback: () => void\n  closeFeedback: () => void\n}\n\nconst FooterContext = React.createContext({} as FooterContext)\nconst useFooter = () => React.useContext(FooterContext)\n\nexport function MorphSurface() {\n  const rootRef = React.useRef<HTMLDivElement>(null)\n\n  const feedbackRef = React.useRef<HTMLTextAreaElement | null>(null)\n  const [showFeedback, setShowFeedback] = React.useState(false)\n  const [success, setSuccess] = React.useState(false)\n\n  const closeFeedback = React.useCallback(() => {\n    setShowFeedback(false)\n    feedbackRef.current?.blur()\n  }, [])\n\n  const openFeedback = React.useCallback(() => {\n    setShowFeedback(true)\n    setTimeout(() => {\n      feedbackRef.current?.focus()\n    })\n  }, [])\n\n  const onFeedbackSuccess = React.useCallback(() => {\n    closeFeedback()\n    setSuccess(true)\n    setTimeout(() => {\n      setSuccess(false)\n    }, 1500)\n  }, [closeFeedback])\n\n  useClickOutside(rootRef, closeFeedback)\n\n  const context = React.useMemo(\n    () => ({\n      showFeedback,\n      success,\n      openFeedback,\n      closeFeedback,\n    }),\n    [showFeedback, success, openFeedback, closeFeedback]\n  )\n\n  return (\n    <div\n      className=\"flex items-center justify-center\"\n      style={{\n        width: FEEDBACK_WIDTH,\n        height: FEEDBACK_HEIGHT,\n      }}\n    >\n      <motion.div\n        data-footer\n        ref={rootRef}\n        className={cx(\n          \"bg-background relative bottom-8 z-3 flex flex-col items-center overflow-hidden border max-sm:bottom-5\"\n        )}\n        initial={false}\n        animate={{\n          width: showFeedback ? FEEDBACK_WIDTH : \"auto\",\n          height: showFeedback ? FEEDBACK_HEIGHT : 44,\n          borderRadius: showFeedback ? 14 : 20,\n        }}\n        transition={{\n          type: \"spring\",\n          stiffness: 550 / SPEED,\n          damping: 45,\n          mass: 0.7,\n          delay: showFeedback ? 0 : 0.08,\n        }}\n      >\n        <FooterContext.Provider value={context}>\n          <Dock />\n          <Feedback ref={feedbackRef} onSuccess={onFeedbackSuccess} />\n        </FooterContext.Provider>\n      </motion.div>\n    </div>\n  )\n}\n\nfunction Dock() {\n  const { showFeedback, openFeedback } = useFooter()\n  return (\n    <footer className=\"mt-auto flex h-[44px] items-center justify-center whitespace-nowrap select-none\">\n      <div className=\"flex items-center justify-center gap-2 px-3 max-sm:h-10 max-sm:px-2\">\n        <div className=\"flex w-fit items-center gap-2\">\n          <AnimatePresence mode=\"wait\">\n            {showFeedback ? (\n              <motion.div\n                key=\"placeholder\"\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 0 }}\n                exit={{ opacity: 0 }}\n                className=\"h-5 w-5\"\n              />\n            ) : (\n              <motion.div\n                key=\"siri-orb\"\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                exit={{ opacity: 0 }}\n                transition={{ duration: 0.2 }}\n              >\n                <SiriOrb\n                  size=\"24px\"\n                  colors={{\n                    bg: \"oklch(22.64% 0 0)\",\n                  }}\n                />\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        <Button\n          type=\"button\"\n          className=\"flex h-fit flex-1 justify-end rounded-full px-2 !py-0.5\"\n          variant=\"ghost\"\n          onClick={openFeedback}\n        >\n          <span className=\"truncate\">Ask AI</span>\n        </Button>\n      </div>\n    </footer>\n  )\n}\n\nconst FEEDBACK_WIDTH = 360\nconst FEEDBACK_HEIGHT = 200\n\nfunction Feedback({\n  ref,\n  onSuccess,\n}: {\n  ref: React.Ref<HTMLTextAreaElement>\n  onSuccess: () => void\n}) {\n  const { closeFeedback, showFeedback } = useFooter()\n  const submitRef = React.useRef<HTMLButtonElement>(null)\n\n  async function onSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault()\n    onSuccess()\n  }\n\n  function onKeyDown(e: React.KeyboardEvent<HTMLTextAreaElement>) {\n    if (e.key === \"Escape\") {\n      closeFeedback()\n    }\n    if (e.key === \"Enter\" && e.metaKey) {\n      e.preventDefault()\n      submitRef.current?.click()\n    }\n  }\n\n  return (\n    <form\n      onSubmit={onSubmit}\n      className=\"absolute bottom-0\"\n      style={{\n        width: FEEDBACK_WIDTH,\n        height: FEEDBACK_HEIGHT,\n        pointerEvents: showFeedback ? \"all\" : \"none\",\n      }}\n    >\n      <AnimatePresence>\n        {showFeedback && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            transition={{\n              type: \"spring\",\n              stiffness: 550 / SPEED,\n              damping: 45,\n              mass: 0.7,\n            }}\n            className=\"flex h-full flex-col p-1\"\n          >\n            <div className=\"flex justify-between py-1\">\n              <p className=\"text-foreground z-2 ml-[38px] flex items-center gap-[6px] select-none\">\n                AI Input\n              </p>\n              <button\n                type=\"submit\"\n                ref={submitRef}\n                className=\"text-foreground right-4 mt-1 flex -translate-y-[3px] cursor-pointer items-center justify-center gap-1 rounded-[12px] bg-transparent pr-1 text-center select-none\"\n              >\n                <Kbd>âŒ˜</Kbd>\n                <Kbd className=\"w-fit\">Enter</Kbd>\n              </button>\n            </div>\n            <textarea\n              ref={ref}\n              placeholder=\"Ask me anything...\"\n              name=\"message\"\n              className=\"bg-primary h-full w-full resize-none scroll-py-2 rounded-md p-4 outline-0\"\n              required\n              onKeyDown={onKeyDown}\n              spellCheck={false}\n            />\n          </motion.div>\n        )}\n      </AnimatePresence>\n      <AnimatePresence>\n        {showFeedback && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            transition={{ duration: 0.2 }}\n            className=\"absolute top-2 left-3\"\n          >\n            <SiriOrb\n              size=\"24px\"\n              colors={{\n                bg: \"oklch(22.64% 0 0)\",\n              }}\n            />\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </form>\n  )\n}\n\nconst LOGO_SPRING = {\n  type: \"spring\",\n  stiffness: 350 / SPEED,\n  damping: 35,\n} as const\n\nfunction Kbd({\n  children,\n  className,\n}: {\n  children: string\n  className?: string\n}) {\n  return (\n    <kbd\n      className={cx(\n        \"bg-primary text-foreground flex h-6 w-fit items-center justify-center rounded-sm border px-[6px] font-sans\",\n        className\n      )}\n    >\n      {children}\n    </kbd>\n  )\n}\n\n// Add default export for lazy loading\nexport default MorphSurface\n",
      "type": "registry:ui",
      "target": "components/ottoui/ui/AiInput.tsx"
    }
  ],
  "registryDependencies": [
    "@ottoui/siri-orb"
  ]
}